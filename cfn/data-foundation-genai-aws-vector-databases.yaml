AWSTemplateFormatVersion: 2010-09-09
Description: Template to provision OpenSearch, Aurora, SQL Server, DocumentDB clusters and SageMaker Notebook for semantic search lab

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Required Parameters
        Parameters:
          - DBUsername
          - DBPassword
    ParameterLabels:
      DBUsername:
        default: DB cluster username
      DBPassword:
        default: DB cluster password
      SageMakerNotebookName:
        default: Name of SageMaker Notebook Instance
      
Parameters:
  DBUsername:
    AllowedPattern: '^[a-zA-Z0-9]+$'
    Default: master
    Description: User name for the account that will be added to the DB cluster.
    MaxLength: '25'
    MinLength: '5'
    Type: String
  DBPassword:
    AllowedPattern: '(?=^.{8,32}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*'
    Description: Password for the account named above. Must be at least 8 characters containing letters, numbers and symbols
    MaxLength: '32'
    MinLength: '8'
    NoEcho: 'true'
    Type: String
    Default: Semantic123!

Mappings:
  SubnetConfig:
    VPC:
      CIDR: '10.30.0.0/16'
    PublicOne:
      CIDR: '10.30.0.0/24'
    PrivateOne:
      CIDR: '10.30.100.0/24'
    PrivateTwo:
      CIDR: '10.30.101.0/24'
    PrivateThree:
      CIDR: '10.30.102.0/24'

Resources:

# Networking
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']
      
  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref VPC
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicOne', 'CIDR']
      MapPublicIpOnLaunch: true

  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref VPC
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateOne', 'CIDR']
  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref VPC
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateTwo', 'CIDR']
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-igw
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable

  DocumentDBSubnetGroup:
    Type: AWS::DocDB::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: Subnet Group for DocumentDB
      DBSubnetGroupName: !Sub ${AWS::StackName}-SG-DocumentDB
      SubnetIds: 
         - !Ref PrivateSubnetOne
         - !Ref PrivateSubnetTwo
         
  DBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub DBSecret-${AWS::StackName}
      Description: DB username and password
      SecretString: !Sub '{ "username" : "${DBUsername}", "password" : "${DBPassword}" }'

  CodeRepository:
    Type: AWS::SageMaker::CodeRepository
    Properties:
      GitConfig:
        RepositoryUrl: https://github.com/mohdaliiqbal/data-foundation-gen-ai-aws-vector-stores

  NotebookInstance:
    Type: AWS::SageMaker::NotebookInstance
    Properties:
      NotebookInstanceName: data-foundation-genai-nb
      InstanceType: ml.m5d.2xlarge
      RoleArn: !GetAtt NBRole.Arn
      DirectInternetAccess: Enabled
      SubnetId: !Ref PublicSubnetOne
      SecurityGroupIds: 
        - !Ref NotebookSecurityGroup
      VolumeSizeInGB : 200
      DefaultCodeRepository: !GetAtt CodeRepository.CodeRepositoryName

  AmazonBedrockBatchInfererenceRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: BedrockTrust
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "es:ESHttp*"
                Resource:
                  - !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/*
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:ListBucket"
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - "bedrock:*"
                Resource:
                  - "*"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - opensearchservice.amazonaws.com
            Action:
              - 'sts:AssumeRole'
          - Effect: Allow
            Principal:
              Service:
                - bedrock.amazonaws.com
            Action:
              - 'sts:AssumeRole'
            Condition:
              StringEquals:
                aws:SourceAccount: !Sub ${AWS::AccountId}
              ArnEquals:
                aws:SourceArn:
                  - !Sub arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:model-invocation-job/*
  NBRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: CustomNotebookAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "es:ESHttp*"
                Resource:
                  - !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/*
              - Effect: Allow
                Action:
                  - "s3:*"
                  - "dynamodb:*"
                  - "bedrock:InvokeModel"
                  - "bedrock:InvokeModelWithResponseStream"
                  - "bedrock:*"
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - "secretsmanager:GetSecretValue"
                Resource:
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*
              - Effect: Allow
                Action:
                  - "iam:PassRole"
                  - "sts:AssumeRole"
                Resource:
                  - !GetAtt AmazonBedrockBatchInfererenceRole.Arn

      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
        - arn:aws:iam::aws:policy/AWSCloudFormationReadOnlyAccess
        - arn:aws:iam::aws:policy/TranslateReadOnly
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - sagemaker.amazonaws.com
            Action:
              - 'sts:AssumeRole'


  s3BucketTraining:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"
      VersioningConfiguration:
        Status: Enabled

  s3BucketHosting:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"
      VersioningConfiguration:
        Status: Enabled
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html

  OpenSearchServiceDomain:
    Type: AWS::OpenSearchService::Domain
    Properties:
      AccessPolicies:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: '*'
            Action: 'es:*'
            Resource: !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/*/*
      EngineVersion: 'OpenSearch_2.13'
      ClusterConfig:
        InstanceType: "r6g.2xlarge.search"
      EBSOptions:
        EBSEnabled: True
        VolumeSize: 20
        VolumeType: 'gp3'
      AdvancedSecurityOptions:
        AnonymousAuthEnabled: False
        Enabled: True
        InternalUserDatabaseEnabled: True
        MasterUserOptions:
          MasterUserName: !Sub ${DBUsername}
          MasterUserPassword: !Sub ${DBPassword}
      NodeToNodeEncryptionOptions:
        Enabled: True
      EncryptionAtRestOptions:
        Enabled: True
        KmsKeyId: alias/aws/es
      DomainEndpointOptions:
        EnforceHTTPS: True

  RDSSQLServerInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: rds-sql-server-instance
      LicenseModel: "license-included"
      Engine: "sqlserver-ee"
      MultiAZ: false
      BackupRetentionPeriod: 1
      EnablePerformanceInsights: true
      PerformanceInsightsRetentionPeriod: 7
      DBInstanceClass: "db.r6i.2xlarge"
      StorageType: io1
      Iops: 2000
      AllocatedStorage: 100
      MaxAllocatedStorage: 1000
      StorageEncrypted: true
      CACertificateIdentifier: rds-ca-rsa2048-g1
      EngineVersion: 15.00.4355.3.v1
      MasterUsername: !Sub ${DBUsername}
      MasterUserPassword: !Sub ${DBPassword}
      PubliclyAccessible: false

  AuroraDBCluster:
    Type: AWS::RDS::DBCluster
    DeletionPolicy: Delete
    Properties:
      Engine: aurora-postgresql
      EngineVersion: 16.2
      DBClusterIdentifier: genai-aurora-cluster
      DatabaseName: vectordb
      Port: 5432
      MasterUsername: !Sub ${DBUsername}
      MasterUserPassword:  !Sub ${DBPassword}
      StorageEncrypted:  True
      EnableIAMDatabaseAuthentication: False
      DeletionProtection: False
  
  AuroraDBFirstInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: 'db.r6g.2xlarge'
      DBClusterIdentifier: !Ref AuroraDBCluster
      DBInstanceIdentifier: genai-aurora-instance1
      Engine: aurora-postgresql
      EngineVersion: 16.2
      AutoMinorVersionUpgrade: False
      PubliclyAccessible: False
      EnablePerformanceInsights: True
      PerformanceInsightsRetentionPeriod: 7

  DocumentDBCluster:
    Type: "AWS::DocDB::DBCluster"
    DeletionPolicy: Delete
    Properties:
      DBClusterIdentifier: !Sub ${AWS::StackName}-genai-docdb-cluster
      MasterUsername: !Sub ${DBUsername}
      MasterUserPassword: !Sub ${DBPassword}
      DBSubnetGroupName : !Ref DocumentDBSubnetGroup
      EngineVersion: 5.0.0
      VpcSecurityGroupIds: 
        - Fn::GetAtt:
            - DocumentDBSecurityGroup
            - GroupId
    DependsOn: DocumentDBSecurityGroup

  DocumentDBInstance:
    Type: "AWS::DocDB::DBInstance"
    Properties:
      DBClusterIdentifier: !Ref DocumentDBCluster
      DBInstanceIdentifier: genai-docdb-instance1
      DBInstanceClass: 'db.r6g.2xlarge'
    DependsOn: DocumentDBCluster  

  # Notebook Security Group
  NotebookSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Sagemaker notebook Security Group
      GroupName: !Sub ${AWS::StackName}-SG-notebook
      VpcId: !Ref VPC
      
  # DocumentDB Security Group
  DocumentDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Amazon DocumentDB Security Group
      GroupName: !Sub ${AWS::StackName}-SG-docDB
      VpcId: !Ref VPC

  InboundRule:  
    Type: AWS::EC2::SecurityGroupIngress
    Properties:   
      IpProtocol: tcp
      FromPort: 27017
      ToPort: 27017
      SourceSecurityGroupId:
        Fn::GetAtt:
          - NotebookSecurityGroup
          - GroupId
      GroupId:
        Fn::GetAtt:
          - DocumentDBSecurityGroup
          - GroupId


Outputs:

  OpenSearchDomainEndpoint:
    Description: OpenSearch domain endpoint
    Value:
      'Fn::GetAtt':
        - OpenSearchServiceDomain
        - DomainEndpoint

  OpenSearchDomainName:
    Description: OpenSearch domain name
    Value: !Ref OpenSearchServiceDomain

  OpenSearchDashboardURL:
    Description: OpenSearch domain name
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt OpenSearchServiceDomain.DomainEndpoint
        - '/_dashboards'

  RDSSQLServerEndpoint:
    Description: RDS SQL Server instance endpoint
    Value:
      'Fn::GetAtt':
        - RDSSQLServerInstance
        - Endpoint.Address

  AuroraDBClusterEndpoint:
    Description: Aurora DB Cluster Endpoint
    Value:
      'Fn::GetAtt':
        - AuroraDBCluster
        - Endpoint.Address
        
  DocumentDBClusterEndpoint:
    Description: DocumentDB Cluster Endpoint
    Value: !GetAtt DocumentDBCluster.Endpoint

  Region:
    Description: Deployed Region
    Value: !Ref AWS::Region

  s3BucketTraining:
    Description: S3 bucket name for training
    Value: !Ref s3BucketTraining

  s3BucketHostingBucketName:
    Description: S3 bucket name for frontend hosting
    Value: !Ref s3BucketHosting

  S3BucketSecureURL:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - s3BucketHosting
          - DomainName
    Description: Name of S3 bucket to hold website content

  SageMakerNotebookURL:
    Description: SageMaker Notebook Instance
    Value: !Join
      - ''
      - - 'https://console.aws.amazon.com/sagemaker/home?region='
        - !Ref AWS::Region
        - '#/notebook-instances/openNotebook/'
        - !GetAtt NotebookInstance.NotebookInstanceName
        - '?view=classic'

  DBSecret:
    Description: Name of the DB secret in Secrets Manager
    Value: !Ref DBSecret

  BedrockBatchInferenceRole:
    Description: Bedrock batch inference role
    Value: !Ref AmazonBedrockBatchInfererenceRole

  BedrockBatchInferenceRoleArn:
    Description: Bedrock batch inference role ARN
    Value: !GetAtt AmazonBedrockBatchInfererenceRole.Arn

  NotebookRole:
    Description: Sagemaker notebook instance role
    Value: !Ref NBRole

  NotebookRoleArn:
    Description: Sagemaker Notebook instance role ARN
    Value: !GetAtt NBRole.Arn